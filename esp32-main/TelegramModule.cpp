#include "app.h"
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <HTTPClient.h>

static WiFiClientSecure secured_client;
static UniversalTelegramBot* bot;
static String telegramChatID;

// Auto reset state
static unsigned long lastLockTime = 0;
static bool waitingForReset = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
bool isCameraOnline() {
  if (WiFi.status() != WL_CONNECTED) return false;

  HTTPClient http;
  http.begin("http://192.168.43.212/");  // üëà IP ‡∏Ç‡∏≠‡∏á ESP32-CAM
  int httpCode = http.GET();
  http.end();

  return (httpCode == 200);  // ‡∏ñ‡πâ‡∏≤ response code = 200 ‚Üí ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
}

void initTelegram(const char* botToken, const char* chatID) {
  secured_client.setInsecure();
  bot = new UniversalTelegramBot(botToken, secured_client);
  telegramChatID = String(chatID);
}

void sendTelegramMessage(const String& msg) {
  if (bot) {
    bot->sendMessage(telegramChatID.c_str(), msg, "");
    Serial.println("‡∏™‡πà‡∏á Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

void sendWelcomeMessage() {
  if (!bot) return;

  String welcome = "üóÑÔ∏è ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Smart Parcel Box\n\n";
  welcome += "‚¨áÔ∏è ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á";

  // ‚úÖ Reply Keyboard ‡πÅ‡∏ö‡∏ö array ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
  String keyboardJson =
    "[[\"‡∏•‡πá‡∏≠‡∏Ñ\", \"‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ\", \"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\"],"
    "[\"‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ\", \"‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï\", \"‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\"]]";

  bot->sendMessageWithReplyKeyboard(
    telegramChatID,
    welcome,
    "",            // parse_mode ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà
    keyboardJson,  // keyboard
    true,          // resize_keyboard
    false          // one_time_keyboard
  );

  Serial.println("‚úÖ ‡∏™‡πà‡∏á Welcome Message ‡∏û‡∏£‡πâ‡∏≠‡∏° Reply Keyboard ‡πÅ‡∏•‡πâ‡∏ß");
}


void handleTelegramCommands() {
  if (!isWiFiConnected() || !bot) return;

  // ‚úÖ Auto Reset: ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å lock ‡πÅ‡∏•‡πâ‡∏ß 5 ‡∏ß‡∏¥ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí reset
  if (waitingForReset && millis() - lastLockTime > 5000) {
    if (getBoxFillPercent() == 0 && getParcelCount() > 0) {
      resetParcelCount();
      lastParcelCount = 0;                    // ‚Üê sync ‡∏Ñ‡πà‡∏≤
      lastFillPercent = getBoxFillPercent();  // ‚Üê sync baseline
      theftBaselineFill = lastFillPercent;    // <<< ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      sendTelegramMessage("üì§ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡πà‡∏≤‡∏á ‚Üí Reset ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥");
    }
    waitingForReset = false;
  }

  int numNewMessages = bot->getUpdates(bot->last_message_received + 1);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot->messages[i].chat_id);
    String text = bot->messages[i].text;

    if (chat_id != telegramChatID) continue;

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if (text == "‡∏•‡πá‡∏≠‡∏Ñ") text = "/lock";
    else if (text == "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ") text = "/unlock";
    else if (text == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞") text = "/status";
    else if (text == "‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô") text = "/stopalert";
    else if (text == "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï") text = "/reset";
    else if (text == "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ") text = "/photo";

    if (text == "/lock") {
      setServoLock(0);
      bot->sendMessage(chat_id.c_str(), "üîí ‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß", "");
      lastLockTime = millis();
      waitingForReset = true;
      authorizedUnlock = false;                 // reset flag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ lock
      theftBaselineFill = getBoxFillPercent();  // baseline ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Ñ
    } else if (text == "/unlock") {
      setServoLock(90);
      bot->sendMessage(chat_id.c_str(), "üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß", "");
      authorizedUnlock = true;
    } else if (text == "/stopalert") {
      stopTheftAlert();
      bot->sendMessage(chat_id.c_str(), "üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß", "");
    } else if (text == "/status") {
      String statusMsg = "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n";
      statusMsg += "üì° WiFi: " + String(isWiFiConnected() ? "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" : "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß") + "\n";
      statusMsg += "üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏: " + String(getParcelCount()) + "\n";
      statusMsg += "üì• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Å‡∏•‡πà‡∏≠‡∏á: " + String(getBoxFillPercent()) + "%\n";

      if (isCameraOnline()) {
        statusMsg += "üì∑ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n";
      } else {
        statusMsg += "üì∑ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n";
      }

      if (alertActive) {
        statusMsg += "üö® ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏à‡∏£‡∏Å‡∏£‡∏£‡∏°!\n";
      } else {
        statusMsg += "‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏Å‡∏ï‡∏¥\n";
      }

      bot->sendMessage(chat_id.c_str(), statusMsg, "");
    } else if (text == "/reset") {
      resetParcelCount();
      lastParcelCount = 0;                    // ‚Üê sync ‡∏Ñ‡πà‡∏≤
      lastFillPercent = getBoxFillPercent();  // ‚Üê sync baseline
      theftBaselineFill = lastFillPercent;    // <<< ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      bot->sendMessage(chat_id.c_str(), "‚ôªÔ∏è Reset ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "");
    }

    else if (text == "/photo") {
      // TODO: ‡∏™‡∏±‡πà‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å ESP32-CAM (placeholder)
      bot->sendMessage(chat_id.c_str(), "üì∑ ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", "");
    } else if (text == "/start") {
      sendWelcomeMessage();
    } else {
      bot->sendMessage(chat_id.c_str(), "‚¨áÔ∏è ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!!", "");
    }
  }
}
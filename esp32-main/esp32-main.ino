#include "app.h"
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

// --------------------
// WiFi / Telegram
// --------------------
const char* ssid = "‡πçYOUR_WIFI";
const char* password = "YOUR_password";
const char* botToken = "YOUR_botToken:botToken";
const char* chatID = "YOUR_chatID";

// --------------------
// Hardware pins
// --------------------
const int PIR_PIN = 34;
const int IR_PIN = 14;
const int TRIG_PIN = 26;
const int ECHO_PIN = 25;
const int SERVO_PIN = 15;
const int BUZZER_PIN = 27;
const int BOX_HEIGHT = 28;  // cm

// --------------------
// Global state
// --------------------
int lastParcelCount = 0;
extern ScreenState currentScreen;
extern unsigned long triggerStartTime;
extern const unsigned long TIMEOUT_MS;

bool authorizedUnlock = false;
bool alertActive = false;
int lastFillPercent = 0;    // baseline fill ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö update display / ‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
int theftBaselineFill = 0;  // baseline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢
int lastServoPos = 0;       // 0 = locked, 90 = unlocked

unsigned long lastLoopTime = 0;
const unsigned long loopInterval = 200;  // ms
unsigned long lastAlertTime = 0;

const float THEFT_THRESHOLD = 5.0;  // % ‡∏•‡∏î‡∏•‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const float LOW_BASELINE = 10.0;    // baseline ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ logic ‡∏û‡∏¥‡πÄ‡∏®‡∏©

// --------------------
// Helper functions
// --------------------
void updateDisplayAll(const String& status, int count, int fill) {
  updateDisplayStatus(status);
  updateDisplayCount(count);
  updateDisplayFill(fill);
}

void handleNewParcel(int count) {
  // ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å ultrasonic ‡∏à‡∏£‡∏¥‡∏á‡πÜ
  int currentFillPercent = getBoxFillPercent();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (0% ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å measurement error)
  if (currentFillPercent == 0) {
    // ‡∏•‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å delay ‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
    delay(100);
    currentFillPercent = getBoxFillPercent();

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô 0% ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reset baseline ‡πÄ‡∏õ‡πá‡∏ô 0)
    if (currentFillPercent == 0 && lastFillPercent > 0) {
      currentFillPercent = lastFillPercent;
      Serial.println("‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ ultrasonic ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ó‡∏ô");
    }
  }

  String msg = "üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡∏°‡πà\n"
               "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏: "
               + String(count) + "\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏: " + String(currentFillPercent) + "%";

  Serial.println(msg);

  if (isWiFiConnected()) {
    sendTelegramMessage(msg);
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï baseline ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠)
  if (currentFillPercent > 0 || lastFillPercent == 0) {
    lastFillPercent = currentFillPercent;
    Serial.printf("[Baseline Updated] lastFillPercent=%d%%\n", lastFillPercent);
  } else {
    Serial.printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï baseline ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: %d%%\n", currentFillPercent);
  }
}

void triggerTheftAlert() {
  if (!alertActive) {
    alertActive = true;
    Serial.println("üö® Trigger Theft Alert! üö®");
    sendTelegramMessage("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏≤‡∏¢! üö®");
  }
  buzzerOn(5000);
}

void stopTheftAlert() {
  alertActive = false;
  int currentFill = getBoxFillPercent();

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á baseline
  lastFillPercent = currentFill;
  theftBaselineFill = currentFill;

  Serial.printf("‚úÖ Stop Alert called, baselines reset to %d%%\n", currentFill);
  sendTelegramMessage("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Å‡∏•‡πà‡∏≠‡∏á ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô " + String(currentFill) + "%");
}

// --------------------
// Setup
// --------------------
void setup() {
  Serial.begin(115200);
  Serial.println("=== Smart Parcel Box Booting... ===");

  initWiFi(ssid, password);
  initTelegram(botToken, chatID);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ WiFi ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  sendWelcomeMessage();

  initPIR(PIR_PIN, "http://192.168.43.212/capture");
  setupIR(IR_PIN);

  initDisplay();
  updateDisplayAll(isWiFiConnected() ? "Connected" : "Failed",
                   getParcelCount(),
                   getBoxFillPercent());

  initUltrasonic(TRIG_PIN, ECHO_PIN, BOX_HEIGHT);
  initServoLock(SERVO_PIN, 0);  // 0 = locked
  lastServoPos = 0;
  initBuzzer(BUZZER_PIN);

  lastParcelCount = getParcelCount();
  lastFillPercent = getBoxFillPercent();
  theftBaselineFill = lastFillPercent;  // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

  Serial.printf("Init Done | Parcels=%d | Fill=%d%% | Servo=%d (0=lock)\n",
                lastParcelCount, lastFillPercent, lastServoPos);
}

// --------------------
// Loop
// --------------------
void loop() {
  unsigned long now = millis();
  if (now - lastLoopTime < loopInterval) return;
  lastLoopTime = now;

  updateBuzzer();
  handleTelegramCommands();

  bool pirDetected = checkMotion();
  int currentParcelCount = getParcelCount();
  int currentFillPercent = getBoxFillPercent();

  // PIR ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
  if (pirDetected) {
    if (currentScreen == SCREEN_MAIN) {
      showTriggerMessage();
      buzzerOn(10);
    }
  }

  // Timeout ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≠‡∏ß‡∏≤‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏
  if (currentScreen == SCREEN_WAIT_PACKAGE) {
    if (currentParcelCount > lastParcelCount) {
      Serial.println("‚úÖ Parcel Added, returning to main screen");
      backToMainScreen();
    } else if (millis() - triggerStartTime > TIMEOUT_MS) {
      Serial.println("‚è≥ Timeout, returning to main screen");
      backToMainScreen();
    }
  }

  // ‡∏°‡∏µ‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏´‡∏°‡πà
  if (currentParcelCount > lastParcelCount) {
    for (int i = lastParcelCount + 1; i <= currentParcelCount; i++) {
      handleNewParcel(i);  // ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞ increment
    }
    lastParcelCount = currentParcelCount;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡πâ‡∏ß
    currentFillPercent = getBoxFillPercent();
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï baseline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢
    theftBaselineFill = currentFillPercent;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Display
  if (currentScreen == SCREEN_MAIN) {
    updateDisplayAll(
      isWiFiConnected() ? "Connected" : "Failed",
      currentParcelCount,
      currentFillPercent);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Fill% ‡∏•‡∏î‡∏•‡∏á
  if (!alertActive && lastServoPos == 0 && !authorizedUnlock && currentParcelCount > 0) {
    float deltaPercent = theftBaselineFill - currentFillPercent;

    if (deltaPercent >= THEFT_THRESHOLD) {
      Serial.printf("‚ö†Ô∏è Theft Suspected (delta >= %.1f%%)! Baseline=%d%% Now=%d%%\n",
                    THEFT_THRESHOLD, theftBaselineFill, currentFillPercent);
      triggerTheftAlert();
    }
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏≤‡∏ñ‡πâ‡∏≤ alertActive
  if (alertActive && now - lastAlertTime > 10000) {
    Serial.println("üîî Repeat Theft Alert");
    sendTelegramMessage("üö® ‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ñ‡∏π‡∏Å‡∏Ç‡πÇ‡∏°‡∏¢! üö®");
    buzzerOn(5000);
    lastAlertTime = now;
  }
}
